function(mat, m)

{

	mat <- as.matrix(mat)

	original <- apply(mat, 1, sum)

	y <- c(1:length(original))

	start <- min(y[original != 0])

	mat <- mat[start:nrow(mat), 1:(ncol(mat) - start + 1)]

	mat1 <- psum(mat)

	zeros <- length(apply(mat1, 2, sum)[apply(mat1, 2, sum) == 0])

	if(zeros > 0) {

		mat <- mat[ - c(1:zeros),  - c(1:zeros)]

		mat1 <- psum(mat)

	}

	raw <- apply(mat, 1, sum)

	y <- c(1:length(raw))

	start <- min(y[raw != 0])

	mat <- mat[start:nrow(mat), 1:(ncol(mat) - start + 1)]

	mat1 <- psum(mat)

#m<-nrow(mat)

	mat <- strip(mat, m)

	mat1 <- strip(mat1, m)

	#raw <- apply(mat, 1, sum)

dimnames(mat)[[1]] <- dimnames(mat1)[[1]] <- 0:(ncol(mat) - 1)

	dimnames(mat)[[2]] <- dimnames(mat1)[[2]] <- 0:(ncol(mat) - 1)

g.numerator<-apply(mat, 2, sum)

g.denominator<-apply(mat1, 2, sum)	

g <- g.numerator/g.denominator

	todelet <- length(g[g == 1])

	raw <- raw[ - c(1:todelet)]

	g <- g[g < 1]

#g<-smooth(g)

#g<-myksmooth(g)

	gg <- 1 - g

	Time <- length(g) - 1

	PT <- c(1:Time)

	for(i in 1:Time)

		PT[i] <- prod(gg[(Time - i + 1):Time])

	PT <- c(1, PT)

#########

PT1 <- c(1:Time)

	for(i in 1:Time)

		PT1[i] <- prod(gg[(Time - i + 1):(Time - i + 1)])

PT1 <- c(1, PT1)

#########

raw1<-raw

raw1[length(raw)]<-mean(c(mat[nrow(mat)-2,1], mat[nrow(mat)-1,1], mat[nrow(mat),1]))

	adjst <- raw1/PT

	nx <- apply(mat1, 2, sum)[ - c(1:todelet)]

	new <- g/(nx * gg)

	vg <- (g * gg)/nx

	new <- new[Time:1]

	new1 <- cumsum(new)

	VP <- PT[-1]^2 * new1

	VN <- (raw1[-1] * (raw1[-1] + 1) * VP)/PT[-1]^4 + (raw1[-1] * (1 - PT[-1]))/PT[-1]^2

	se <- VN

	for(i in 1:Time) {

		if(se[i] != 0)

			se[i] <- sqrt(se[i])

	}

	se <- c(0, se)

	prob <- cbind(PT, c(0, VP))

	lower <- adjst - 1.96 * se

	upper <- adjst + 1.96 * se

	for(i in 1:length(raw))

		lower[i] <- max(lower[i], raw1[i])

	incidence <- cbind(raw, adjst, lower, upper)

	incidence <- incidence[prob[, 1] > 0.005,  ]

#################

Onestep <- raw1/PT1

	VP1 <- PT1[-1]^2 * new1

	VN1 <- (raw1[-1] * (raw1[-1] + 1) * VP)/PT1[-1]^4 + (raw1[-1] * (1 - PT1[-1]))/PT1[-1]^2

se1 <- VN1

	for(i in 1:Time) {

		if(se1[i] != 0)

			se1[i] <- sqrt(se1[i])

	}

	se1 <- c(0, se1)

	prob1 <- cbind(PT1, c(0, VP1))

	lower1 <- Onestep - 1.96 * se1

	upper1 <- Onestep + 1.96 * se1

for(i in 1:length(raw))

		lower1[i] <- max(lower1[i], raw1[i])

	Onestepinc <- cbind(raw, Onestep, lower1, upper1)

########################

	return(list(workingmatrix=mat,g.numerator=g.numerator, g.denominator=g.denominator,g = cbind(g, g + 1.96 * sqrt(vg), g - 1.96 * sqrt(vg)), vg = diag(vg), prob = prob,  prob1=prob1, incidence = incidence, Onestepinc=Onestepinc,raw=raw, raw1=raw1, original=original))

}